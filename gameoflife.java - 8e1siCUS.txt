/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameoflife;

import java.util.Random;

/**
 *
 * @author swalker
 */
public class GameOfLife {

    boolean[][] base = new boolean[10][10];
    boolean[][] next = new boolean[10][10];

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        GameOfLife gl = new GameOfLife();
        gl.randomize();
        gl.printArray();
        for (int i = 0; i < 40; i++) {
            gl.generate();
            gl.copy();
            gl.printArray();
        }
    }

    private int neighborCount(int r, int c) {
        int count = 0;

        if (r > 0 && c > 0 && base[r - 1][c - 1]) {
            count++;
        }
        if (r > 0 && base[r - 1][c]) {
            count++;
        }
        if (r > 0 && c < base[r].length - 1 && base[r - 1][c + 1]) {
            count++;
        }
        if (c > 0 && base[r][c - 1]) {
            count++;
        }
        if (c < base[r].length - 1 && base[r][c + 1]) {
            count++;
        }
        if (r < base.length - 1 && c > 0 && base[r + 1][c - 1]) {
            count++;
        }
        if (r < base.length - 1 && base[r + 1][c]) {
            count++;
        }
        if (r < base.length - 1 && c < base[r].length - 1 && base[r + 1][c + 1]) {
            count++;
        }

        return count;
    }

    private void lifeState(int r, int c) {
        int nc = neighborCount(r, c);
        next[r][c] = (base[r][c]) ? (nc == 2 || nc == 3) : (nc == 3);
    }

    private void copy() {
        for (int r = 0; r < base.length; r++) {
            System.arraycopy(next[r], 0, base[r], 0, base[r].length);
        }
    }

    private void printArray() {
       StringBuilder sb = new StringBuilder();
        for (int i = 0; i < base[0].length + 2; i++) {
            sb.append('-');
        }
        String banner = sb.toString();
        System.out.println(banner);
        for (boolean[] r : base) {
            System.out.print('|');
            for (boolean cell : r) {
                System.out.print(cell ? 'X' : ' ');
            }
            System.out.println('|');
        }
        System.out.println(banner);
    }

    private void randomize() {
        Random rnd = new Random(12345);
        for (boolean[] r : base) {
            for (int c = 0; c < r.length; c++) {
                r[c] = (rnd.nextBoolean());
            }
        }
    }
    
    private void generate() {
        for (int r = 0; r < base.length; r++) {
            for (int c = 0; c < base[r].length; c++) {
                lifeState(r, c);
            }
        }
    }
}